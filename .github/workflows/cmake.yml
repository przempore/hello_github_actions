name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build 

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --target install

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      if: github.event_name == 'push'
      with:
        name: Hello_Github_action
        path: ${{runner.workspace}}/install/release/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
    - name: Downlaod build artifacts
      id: download_build_artifacts
      uses: actions/download-artifact@v2
      with:
        name: Hello_Github_action
        path: ./artifacts/sentinel

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./artifacts/
    - id: set_upload_url
      run: |
        upload_url=`cat ./artifacts/upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ./

    - name: Zip artifacts
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND cmake -E tar "cfv" "Sentinel.zip" --format=zip artifacts/sentinel
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Zip artifacts failed!")
        endif()
      working-directory: ./

    - name: Display structure of runner.workspace directory
      run: ls -R
      working-directory: ${{runner.workspace}}/

    - name: Display structure of ./ directory
      run: ls -R
      working-directory: ./

    - name: Upload Release Asset
      id: upload_release_asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./Sentinel.zip
        asset_name: Sentinel.zip
        asset_content_type: application/zip
