name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ${ { matrix.config.os } }
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: "Release", cc: "gcc", cxx: "g++"
          }

    steps:
    - uses: actions/checkout@v2

    - name: Download Ninja and CMake
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        set(ninja_version "1.9.0")
        set(cmake_version "3.16.2")

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${ { runner.os } }" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        elseif ("${ { runner.os } }" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
        elseif ("${ { runner.os } }" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "Darwin-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        message("::set-output name=cmake_dir::${cmake_dir}")

        if (NOT "${ { runner.os } }" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${ { matrix.config.cc } })
          set(ENV{CXX} ${ { matrix.config.cxx } })

          if ("${ { runner.os } }" STREQUAL "Windows" AND NOT "x${ { matrix.config.environment_script } }" STREQUAL "x")
            execute_process(
              COMMAND "${ { matrix.config.environment_script } }" && set
              OUTPUT_FILE environment_script_output.txt
            )
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1} } "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()

          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ninja" ninja_program)

          execute_process(
            COMMAND ${ { steps.cmake_and_ninja.outputs.cmake_dir } }/cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=${ { matrix.config.build_type } }
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=${ninja_program}
              -D CMAKE_INSTALL_PREFIX=$ENV{GITHUB_WORKSPACE}/install
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        if ("${ { runner.os } }" STREQUAL "Windows" AND NOT "x${ { matrix.config.environment_script } }" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1} } "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        execute_process(
          COMMAND ${ { steps.cmake_and_ninja.outputs.cmake_dir } }/cmake --build build --target install
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    # - name: Configure CMake
    #   # Use a bash shell so we can use the same syntax for environment variable
    #   # access regardless of the host operating system
    #   shell: bash
    #   working-directory: ${{runner.workspace}}/build
    #   # Note the current convention is to use the -S and -B options here to specify source 
    #   # and build directories, but this is only available with CMake 3.13 and higher.  
    #   # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
    #   run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install

    # - name: Build
    #   working-directory: ${{runner.workspace}}/build
    #   shell: bash
    #   # Execute the build.  You can specify a specific target with "--target <NAME>"
    #   run: cmake --build . --config $BUILD_TYPE --target install

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      # if: github.event_name == 'push' todo: commented only for testing
      with:
        name: Hello_Github_action
        path: ${{runner.workspace}}/install/release/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      # if: github.event_name == 'push' todo: commented only for testing
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Downlaod build artifacts
      id: download_build_artifacts
      uses: actions/download-artifact@v2
      with:
        name: Hello_Github_action
        path: ${{runner.workspace}}/Hello_Github_action/

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ${{runner.workspace}}/

    # - name: Zip artifacts
    #   run: zip -r Hello_Github_action.zip *
    #   working-directory: ${{runner.workspace}}/Hello_Github_action/

    - name: Upload Release Asset
      id: upload_release_asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # asset_path: ${{runner.workspace}}/Hello_Github_action/Hello_Github_action.zip
        asset_path: ${{runner.workspace}}/Hello_Github_action/
        asset_name: Hello_Github_action.zip
        asset_content_type: application/zip
